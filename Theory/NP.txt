
# Nondeterministic Polynomial Time (NP)


Lecture 23: Computational Complexity
MIT

## Why is NP called "Nondeterministic" Polynomial Time?
The term comes from nondeterministic computation models, specifically the nondeterministic Turing machine (NTM).

### Key Differences Between Models:
- **Deterministic Turing Machine (DTM)**: Follows a single computation path step by step
- **Nondeterministic Turing Machine (NTM)**: Can "guess" the correct solution instantly and then verify it in polynomial time

### How a Nondeterministic Turing Machine Works:
1. **Guessing Phase (Nondeterministic Step)**: The machine picks the correct solution from all possible candidates
2. **Verification Phase (Deterministic Step)**: The machine verifies if the guessed solution is correct in polynomial time

### Why "Nondeterministic" Matters:
- If we had a truly nondeterministic machine, NP problems could be solved in polynomial time
- On real computers (which are deterministic), solving NP problems often requires exponential time in the worst case
- NP problems are "hard" because we don't have an efficient way to simulate this magical guessing step on deterministic machines

### Example: Sudoku as an NP Problem
- **Verification**: A completed Sudoku board can be checked in polynomial time
- **Solving**: Finding the correct board requires searching through many possibilities, potentially taking exponential time

## Decision Problems

### Types of Decision Problems:
- **Decidable Problems**: Problems for which an algorithm exists that always provides a correct yes/no answer in finite time
- **Undecidable Problems**: Problems for which no algorithm can determine a yes/no answer for all possible inputs

### Complexity Classes of Decision Problems:
- **P (Polynomial Time)**: Solvable in polynomial time
- **NP (Nondeterministic Polynomial Time)**: Solutions can be verified in polynomial time
- **NP-Complete**: The hardest problems in NP; if one NP-complete problem is solved in P, all NP problems can be solved in P
- **NP-Hard**: At least as hard as NP-complete problems but may not be decision problems
- **EXP (Exponential Time)**: Require exponential time to solve

### Examples of Decision Problems:
- Graph Problems: "Is there a Hamiltonian path in a given graph?"
- Satisfiability Problems: "Can a Boolean formula be satisfied?" (SAT problem)
- Language Membership: "Does a given string belong to a particular formal language?"
- Optimization-to-Decision Reduction: Many optimization problems have related decision versions

# NP-Complete vs. EXP-Complete

## NP-Complete (NPC) Problems
**Definition**: The hardest problems in NP. If any NP-complete problem has a polynomial-time solution, then P = NP.

**Properties**:
- Verification in Polynomial Time: Given a solution, you can verify it in polynomial time
- Reduction: Any other NP problem can be converted into an NP-complete problem in polynomial time
- Unknown if Solvable in Polynomial Time: We don't know if they can be solved efficiently

**Examples**:
- SAT (Boolean Satisfiability Problem)
- Traveling Salesperson Problem (Decision Version)
- 3-Coloring (Graph Coloring Problem)
- Knapsack Problem (Decision Version)
- Tetris (Offline Mode, Fixed Pieces)

## EXP-Complete Problems
**Definition**: The hardest problems in EXP, likely not solvable in polynomial time.

**Properties**:
- Requires Exponential Time to Solve: At least exponential time in the worst case
- Cannot Be Verified in Polynomial Time (unless NP = EXP)
- EXP-Hardness: Any other problem in EXP can be reduced to an EXP-complete problem

**Examples**:
- Generalized Chess (Playing optimally from any position)
- Generalized Go
- Generalized Checkers
- Certain types of Logical Reasoning Problems

## Key Differences Between NP-Complete and EXP-Complete

| Feature | NP-Complete (NPC) | EXP-Complete |
|---------|-------------------|--------------|
| Solution Verification | Polynomial time | Exponential time |
| Solving Time | Likely Exponential (unless P=NP) | At least Exponential |
| Containment | Inside NP | Inside EXP |
| Reduction | Can reduce any NP problem to an NP-complete problem | Can reduce any EXP problem to an EXP-complete problem |
| Example Problems | SAT, TSP, 3-Coloring | Chess, Checkers, Go (Generalized) |

# Generalized Chess and Computational Complexity

## Why Verifying a Solution in Generalized Chess is Hard (EXP-Complete)
The decision problem: "Given an n×n chessboard and a position, can White force a win in at most k moves?"

**Checking a Given "Winning Strategy" Isn't Simple**:
- In NP-complete problems, a given solution can be checked in polynomial time
- In Generalized Chess, a "solution" is a full strategy, and verifying requires playing out all possible counter-moves by Black
- This process requires evaluating an exponentially large game tree, leading to exponential-time verification

**Game Tree Complexity**:
- In standard 8×8 chess, the game tree complexity is estimated to be around 10^120 possible positions
- On an n×n board, the number of possible states grows exponentially with n

## Chess Simulations Despite EXP-Completeness

Modern chess engines like Stockfish, AlphaZero, and Leela Chess Zero use heuristics, approximations, and pruning rather than brute-force solving.

**Key Techniques Used in Chess Engines**:

1. **Minimax Algorithm**:
   - Evaluates all possible moves, assumes opponent plays optimally
   - Problem: Full minimax without optimizations is too slow

2. **Alpha-Beta Pruning**:
   - If a move is already known to be worse than a previously evaluated move, the engine stops evaluating it
   - Significantly reduces positions needing evaluation

3. **Monte Carlo Tree Search (MCTS)**:
   - Selects promising moves based on random simulations
   - Used in AlphaZero and Leela Chess Zero

4. **Heuristic Evaluation Functions**:
   - Assign numeric scores to positions based on material advantage, king safety, pawn structure, etc.

5. **Neural Networks**:
   - Learn move evaluations from millions of self-played games

**Why Modern Engines Can Play Chess Well Despite EXP-Completeness**:

| Factor | Generalized Chess (EXP-Complete) | Real Chess (Practical Play) |
|--------|----------------------------------|----------------------------|
| Board Size | n×n, grows exponentially | Fixed 8×8 board |
| Game Tree Size | Exponential with n | Still huge but manageable |
| Search Method | Full brute-force required to "solve" | Heuristics, pruning, and ML reduce complexity |
| Is It Solved? | No (Generalized case proven EXP-complete) | Not yet solved, but near-perfect play exists |
| Move Selection | Worst-case exponential search | Efficient approximations |

Real chess isn't solved yet, but computers play it close to optimally using efficient approximations without needing to compute every possible outcome.

